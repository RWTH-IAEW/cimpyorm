image: docker:git
services:
- docker:dind

stages:
- build
- verify
- test:unit
- test:integration
- deploy:build
- deploy:check
- deploy:upload
- doc

variables:
  DOCKER_DRIVER: overlay2
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_BUILD_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  CACHE_IMAGE: $CI_REGISTRY_IMAGE:cache
  MYSQL_DATABASE: cim
  MYSQL_ALLOW_EMPTY_PASSWORD: "1"
  PYPI_ENDPOINT: $PYPI_ENDPOINT
  PYPI_USER: $PYPI_USER
  PYPI_PASSWORD: $PYPI_PASSWORD

build:
  tags:
    - linux
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build --cache-from $CACHE_IMAGE -t $CONTAINER_TEST_IMAGE -t $CACHE_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
    - docker push $CACHE_IMAGE

.test:
  tags:
    - docker
  image: $CONTAINER_TEST_IMAGE
  except:
    - Releases

pytest:
  extends: .test
  stage: test:unit
  script:
    - pytest --ignore=cimpyorm/Test/Integration --ignore=cimpyorm/Test/Deployment --junitxml=pytest.xml --cov
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    when: always
    reports:
      junit: pytest.xml

pylint:
  extends: .test
  stage: verify
  script:
    - ./pylint.sh

bandit:
  extends: .test
  stage: verify
  allow_failure: true
  script:
    - pip install bandit
    - bandit -r cimpyorm -f html -o report.html
  artifacts:
    when: always
    expose_as: "Bandit"
    paths: [report.html]

.integration:
  tags:
    - docker
  image: $CONTAINER_TEST_IMAGE
  stage: test:integration
  retry: 1
  only:
    - Dev

integration:SQLite:
  extends: .integration
  script:
    - pytest --maxfail=1 cimpyorm/Test/Integration/SQLite

pages:
  stage: doc
  only:
    - Releases
  tags:
    - docker
  image: $CONTAINER_TEST_IMAGE
  script:
    - cd docs
    - make html
    - cd ..
    - mkdir public
    - mv docs/_build/html/* public
  artifacts:
    paths:
    - public

.deploy_common:
  only:
    - Releases
  tags:
    - docker
  image: python

build_dist:
  extends: .deploy_common
  stage: deploy:build
  script:
    - pip install poetry
    - poetry build
  artifacts:
    when: on_success
    expire_in: 1 week
    paths:
      - dist

check:
  only:
    - Releases
  tags:
    - linux
  stage: deploy:check
  script:
    - mkdir contents
    - tar -xf dist/*.tar.gz --directory contents
    - ls -R contents
  dependencies:
    - build_dist

upload:
  extends: .deploy_common
  stage: deploy:upload
  when: manual
  allow_failure: true
  script:
    - pip install -q twine toml requests pytest
    - twine upload --repository-url $PYPI_ENDPOINT --u $PYPI_USER --p $PYPI_PASSWORD dist/*
    - sleep 20
    - pytest cimpyorm/Test/Deployment
  dependencies:
    - build_dist
